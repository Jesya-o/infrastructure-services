- name: Add Grafana APT GPG key
  ansible.builtin.apt_key:
    url: https://packages.grafana.com/gpg.key
    state: present

- name: Add Grafana APT repository
  ansible.builtin.apt_repository:
    repo: deb https://packages.grafana.com/oss/deb stable main
    state: present

- name: Install Grafana
  ansible.builtin.apt:
    name: grafana
    state: present

- name: check port
  ansible.builtin.debug:
    msg: 
      - "{{ hostvars[inventory_hostname].public_url }}"
      - "{{ hostvars[inventory_hostname].ansible_port | regex_search('^[0-9]{2}')  }}"

- name: Copy main.json to remote host
  copy:
    src: "{{ role_path }}/files/main.json"
    dest: /etc/grafana/provisioning/dashboards/main.json

- name: Copy provisioning configuration file to the remote host
  template:
    src: "{{ role_path }}/templates/grafana_provisioning.yaml.j2"
    dest: /etc/grafana/provisioning/dashboards/default.yaml

- name: Copy Grafana configuration
  template:
    src: grafana.ini.j2
    dest: /etc/grafana/grafana.ini
  notify: Restart Grafana

- name: Ensure Grafana service is started and enabled
  ansible.builtin.service:
    name: grafana-server
    state: started
    enabled: yes

- name: Check if the datasource already exists
  uri:
    url: http://localhost:3000/api/datasources/name/Prometheus
    method: GET
    headers:
      Authorization: "Basic SmVzeWEtbzp0b2pp"
    status_code: 200
    validate_certs: no
  ignore_errors: yes
  register: datasource_exists

- name: Configure Grafana datasource if not already configured
  when: datasource_exists.status != 200
  uri:
    url: http://localhost:3000/api/datasources
    method: POST
    body: '{
      "name": "Prometheus",
      "type": "prometheus",
      "url": "http://jesya-o-2:9090/prometheus",
      "access": "proxy",
      "isDefault": true
    }'
    headers:
      Content-Type: "application/json"
      Authorization: "Basic SmVzeWEtbzp0b2pp"
    status_code: 200
    validate_certs: no
